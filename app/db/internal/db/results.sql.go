// Code generated by sqlc. DO NOT EDIT.
// source: results.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const insertResult = `-- name: InsertResult :exec
INSERT INTO results (
    uuid,
    datafile_uuid,
    line,
    benchmark_uuid,
    commit_sha,
    environment_uuid,
    metadata_uuid,
    iterations,
    value
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9
)
`

type InsertResultParams struct {
	UUID            uuid.UUID
	DatafileUUID    uuid.UUID
	Line            int32
	BenchmarkUUID   uuid.UUID
	CommitSHA       []byte
	EnvironmentUUID uuid.UUID
	MetadataUUID    uuid.UUID
	Iterations      int64
	Value           float64
}

func (q *Queries) InsertResult(ctx context.Context, arg InsertResultParams) error {
	_, err := q.db.ExecContext(ctx, insertResult,
		arg.UUID,
		arg.DatafileUUID,
		arg.Line,
		arg.BenchmarkUUID,
		arg.CommitSHA,
		arg.EnvironmentUUID,
		arg.MetadataUUID,
		arg.Iterations,
		arg.Value,
	)
	return err
}

const result = `-- name: Result :one
SELECT uuid, datafile_uuid, line, benchmark_uuid, commit_sha, environment_uuid, metadata_uuid, iterations, value FROM results
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) Result(ctx context.Context, uuid uuid.UUID) (Result, error) {
	row := q.db.QueryRowContext(ctx, result, uuid)
	var i Result
	err := row.Scan(
		&i.UUID,
		&i.DatafileUUID,
		&i.Line,
		&i.BenchmarkUUID,
		&i.CommitSHA,
		&i.EnvironmentUUID,
		&i.MetadataUUID,
		&i.Iterations,
		&i.Value,
	)
	return i, err
}
