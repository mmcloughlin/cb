// Code generated by sqlc. DO NOT EDIT.
// source: commits.sql

package db

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const commit = `-- name: Commit :one
SELECT sha, tree, parents, author_name, author_email, author_time, committer_name, committer_email, commit_time, message FROM commits
WHERE sha = $1 LIMIT 1
`

func (q *Queries) Commit(ctx context.Context, sha []byte) (Commit, error) {
	row := q.queryRow(ctx, q.commitStmt, commit, sha)
	var i Commit
	err := row.Scan(
		&i.SHA,
		&i.Tree,
		&i.Parents,
		&i.AuthorName,
		&i.AuthorEmail,
		&i.AuthorTime,
		&i.CommitterName,
		&i.CommitterEmail,
		&i.CommitTime,
		&i.Message,
	)
	return i, err
}

const insertCommit = `-- name: InsertCommit :exec
INSERT INTO commits (
    sha,
    tree,
    parents,
    author_name,
    author_email,
    author_time,
    committer_name,
    committer_email,
    commit_time,
    message
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10
) ON CONFLICT DO NOTHING
`

type InsertCommitParams struct {
	SHA            []byte
	Tree           []byte
	Parents        pq.ByteaArray
	AuthorName     string
	AuthorEmail    string
	AuthorTime     time.Time
	CommitterName  string
	CommitterEmail string
	CommitTime     time.Time
	Message        string
}

func (q *Queries) InsertCommit(ctx context.Context, arg InsertCommitParams) error {
	_, err := q.exec(ctx, q.insertCommitStmt, insertCommit,
		arg.SHA,
		arg.Tree,
		arg.Parents,
		arg.AuthorName,
		arg.AuthorEmail,
		arg.AuthorTime,
		arg.CommitterName,
		arg.CommitterEmail,
		arg.CommitTime,
		arg.Message,
	)
	return err
}
