// Code generated by sqlc. DO NOT EDIT.
// source: tasks.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    uuid,
    worker,
    commit_sha,
    type,
    target_uuid,
    status,
    last_status_update
)VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    'created',
    NOW()
)
RETURNING uuid, worker, commit_sha, type, target_uuid, status, last_status_update, datafile_uuid
`

type CreateTaskParams struct {
	UUID       uuid.UUID
	Worker     string
	CommitSHA  []byte
	Type       TaskType
	TargetUUID uuid.UUID
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.queryRow(ctx, q.createTaskStmt, createTask,
		arg.UUID,
		arg.Worker,
		arg.CommitSHA,
		arg.Type,
		arg.TargetUUID,
	)
	var i Task
	err := row.Scan(
		&i.UUID,
		&i.Worker,
		&i.CommitSHA,
		&i.Type,
		&i.TargetUUID,
		&i.Status,
		&i.LastStatusUpdate,
		&i.DatafileUUID,
	)
	return i, err
}

const workerTasksWithStatus = `-- name: WorkerTasksWithStatus :many
SELECT
    uuid, worker, commit_sha, type, target_uuid, status, last_status_update, datafile_uuid
FROM
    tasks
WHERE 1=1
    AND worker=$1
    AND status = ANY ($2::task_status[])
`

type WorkerTasksWithStatusParams struct {
	Worker   string
	Statuses []TaskStatus
}

func (q *Queries) WorkerTasksWithStatus(ctx context.Context, arg WorkerTasksWithStatusParams) ([]Task, error) {
	rows, err := q.query(ctx, q.workerTasksWithStatusStmt, workerTasksWithStatus, arg.Worker, pq.Array(arg.Statuses))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.UUID,
			&i.Worker,
			&i.CommitSHA,
			&i.Type,
			&i.TargetUUID,
			&i.Status,
			&i.LastStatusUpdate,
			&i.DatafileUUID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
