// Code generated by sqlc. DO NOT EDIT.
// source: sched.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const recentCommitModulePairsWithoutWorkerTasks = `-- name: RecentCommitModulePairsWithoutWorkerTasks :many
SELECT
    c.sha AS commit_sha,
    c.commit_time,
    m.uuid AS module_uuid
FROM
    commits AS c,
    modules AS m
WHERE NOT EXISTS (
        SELECT uuid, worker, commit_sha, type, target_uuid, status, last_status_update, datafile_uuid
        FROM tasks AS t
        WHERE 1=1
            AND t.commit_sha = c.sha
            AND t.type = 'module'
            AND t.target_uuid = m.uuid
            AND t.status = ANY ($1::task_status[])
            AND t.worker = $2
    )
ORDER BY
    c.commit_time DESC,
    m.uuid
LIMIT
    $3
`

type RecentCommitModulePairsWithoutWorkerTasksParams struct {
	Statuses []TaskStatus
	Worker   string
	Num      int32
}

type RecentCommitModulePairsWithoutWorkerTasksRow struct {
	CommitSHA  []byte
	CommitTime time.Time
	ModuleUUID uuid.UUID
}

func (q *Queries) RecentCommitModulePairsWithoutWorkerTasks(ctx context.Context, arg RecentCommitModulePairsWithoutWorkerTasksParams) ([]RecentCommitModulePairsWithoutWorkerTasksRow, error) {
	rows, err := q.query(ctx, q.recentCommitModulePairsWithoutWorkerTasksStmt, recentCommitModulePairsWithoutWorkerTasks, pq.Array(arg.Statuses), arg.Worker, arg.Num)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RecentCommitModulePairsWithoutWorkerTasksRow
	for rows.Next() {
		var i RecentCommitModulePairsWithoutWorkerTasksRow
		if err := rows.Scan(&i.CommitSHA, &i.CommitTime, &i.ModuleUUID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
