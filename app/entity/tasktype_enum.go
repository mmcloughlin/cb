// Code generated by "enumer -type TaskType -output tasktype_enum.go -trimprefix TaskType -transform snake"; DO NOT EDIT.

//
package entity

import (
	"fmt"
)

const _TaskTypeName = "module"

var _TaskTypeIndex = [...]uint8{0, 6}

func (i TaskType) String() string {
	i -= 1
	if i >= TaskType(len(_TaskTypeIndex)-1) {
		return fmt.Sprintf("TaskType(%d)", i+1)
	}
	return _TaskTypeName[_TaskTypeIndex[i]:_TaskTypeIndex[i+1]]
}

var _TaskTypeValues = []TaskType{1}

var _TaskTypeNameToValueMap = map[string]TaskType{
	_TaskTypeName[0:6]: 1,
}

// TaskTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TaskTypeString(s string) (TaskType, error) {
	if val, ok := _TaskTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TaskType values", s)
}

// TaskTypeValues returns all values of the enum
func TaskTypeValues() []TaskType {
	return _TaskTypeValues
}

// IsATaskType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TaskType) IsATaskType() bool {
	for _, v := range _TaskTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
