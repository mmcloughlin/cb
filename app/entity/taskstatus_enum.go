// Code generated by "enumer -type TaskStatus -output taskstatus_enum.go -trimprefix TaskStatus -transform snake"; DO NOT EDIT.

//
package entity

import (
	"fmt"
)

const _TaskStatusName = "createdin_progresscomplete_successcomplete_error"

var _TaskStatusIndex = [...]uint8{0, 7, 18, 34, 48}

func (i TaskStatus) String() string {
	i -= 1
	if i >= TaskStatus(len(_TaskStatusIndex)-1) {
		return fmt.Sprintf("TaskStatus(%d)", i+1)
	}
	return _TaskStatusName[_TaskStatusIndex[i]:_TaskStatusIndex[i+1]]
}

var _TaskStatusValues = []TaskStatus{1, 2, 3, 4}

var _TaskStatusNameToValueMap = map[string]TaskStatus{
	_TaskStatusName[0:7]:   1,
	_TaskStatusName[7:18]:  2,
	_TaskStatusName[18:34]: 3,
	_TaskStatusName[34:48]: 4,
}

// TaskStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TaskStatusString(s string) (TaskStatus, error) {
	if val, ok := _TaskStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TaskStatus values", s)
}

// TaskStatusValues returns all values of the enum
func TaskStatusValues() []TaskStatus {
	return _TaskStatusValues
}

// IsATaskStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TaskStatus) IsATaskStatus() bool {
	for _, v := range _TaskStatusValues {
		if i == v {
			return true
		}
	}
	return false
}
