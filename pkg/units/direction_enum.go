// Code generated by "enumer -type ImprovementDirection -output direction_enum.go -trimprefix ImprovementDirection -transform snake"; DO NOT EDIT.

//
package units

import (
	"fmt"
)

const _ImprovementDirectionName = "smallerunknownlarger"

var _ImprovementDirectionIndex = [...]uint8{0, 7, 14, 20}

func (i ImprovementDirection) String() string {
	i -= -1
	if i < 0 || i >= ImprovementDirection(len(_ImprovementDirectionIndex)-1) {
		return fmt.Sprintf("ImprovementDirection(%d)", i+-1)
	}
	return _ImprovementDirectionName[_ImprovementDirectionIndex[i]:_ImprovementDirectionIndex[i+1]]
}

var _ImprovementDirectionValues = []ImprovementDirection{-1, 0, 1}

var _ImprovementDirectionNameToValueMap = map[string]ImprovementDirection{
	_ImprovementDirectionName[0:7]:   -1,
	_ImprovementDirectionName[7:14]:  0,
	_ImprovementDirectionName[14:20]: 1,
}

// ImprovementDirectionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ImprovementDirectionString(s string) (ImprovementDirection, error) {
	if val, ok := _ImprovementDirectionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ImprovementDirection values", s)
}

// ImprovementDirectionValues returns all values of the enum
func ImprovementDirectionValues() []ImprovementDirection {
	return _ImprovementDirectionValues
}

// IsAImprovementDirection returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ImprovementDirection) IsAImprovementDirection() bool {
	for _, v := range _ImprovementDirectionValues {
		if i == v {
			return true
		}
	}
	return false
}
